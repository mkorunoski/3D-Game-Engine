#define POW2(x) (x * x)

//	===============================
//	UNIFORMS
//	===============================
uniform float specularIntensity;
uniform float specularExponent;
uniform vec3 C_eyePosition;

//	===============================
//	STRUCTS
//	===============================
struct BaseLight
{
	vec3 color;
	float intensity;
};

struct DirectionalLight
{
	BaseLight base;
	vec3 direction;
};

struct Attenuation
{
	float constant;
	float linear;
	float exponent;
};

struct PointLight
{
	BaseLight base;
	Attenuation atten;
	vec3 position;
	float range;
};

struct SpotLight
{
	PointLight pointLight;
	vec3 direction;
	float cutoff;
};

//	===============================
//	FUNCTIONS
//	===============================
vec4 calcLight(BaseLight base, vec3 direction, vec3 normal, vec3 position)
{
	float diffuseFactor = clamp(dot(normal, -direction), 0.1, 1);

	vec4 diffuseColor = vec4(0, 0, 0, 0);
	vec4 specularColor = vec4(0, 0, 0, 0);

	if(diffuseFactor > 0)
	{
		diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;

		vec3 directionToEye = normalize(C_eyePosition - position);
		// vec3 reflectDirection = normalize(reflect(direction, normal));
		vec3 halfDirection = normalize(directionToEye - direction);

		float specularFactor = dot(halfDirection, normal);
		// float specularFactor = dot(directionToEye, reflectDirection);
		specularFactor = pow(specularFactor, specularExponent);

		if(specularFactor > 0)
		{
			specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
		}
	}

	return diffuseColor + specularColor;
}

vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal, vec3 position)
{
	return calcLight(directionalLight.base, -directionalLight.direction, normal, position);
}

vec4 calcPointLight(PointLight pointLight, vec3 normal, vec3 position)
{
	vec3 lightDirection = position - pointLight.position;
	float distanceToPoint = length(lightDirection);

	if(distanceToPoint > pointLight.range)
	{
		return vec4(0, 0, 0, 0);
	}

	lightDirection = normalize(lightDirection);

	vec4 color = calcLight(pointLight.base, lightDirection, normal, position);

	float attenuation = pointLight.atten.constant +
						pointLight.atten.linear * distanceToPoint +
						pointLight.atten.exponent * POW2(distanceToPoint) +
						0.000001;

	return color / attenuation;
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal, vec3 position)
{
	vec3 lightDirection = normalize(position - spotLight.pointLight.position);
	float spotFactor = dot(lightDirection, spotLight.direction);

	vec4 color = vec4(0, 0, 0, 0);

	if(spotFactor > spotLight.cutoff)
	{
		color = calcPointLight(spotLight.pointLight, normal, position) * 
				(1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
	}

	return color;
}